interactions:
- request:
    body: '{"ksql": "DESCRIBE EXTENDED pageviews_original;"}'
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Content-Length:
      - '49'
      Content-Type:
      - application/json
      Host:
      - localhost:8088
      User-Agent:
      - Python-urllib/3.6
    method: POST
    uri: http://localhost:8088/ksql
  response:
    body:
      string: '{"@type":"statement_error","error_code":40001,"message":"Could not
        find STREAM/TABLE ''PAGEVIEWS_ORIGINAL'' in the Metastore","statementText":"DESCRIBE
        EXTENDED pageviews_original;","entities":[]}'
    headers:
      connection:
      - close
      content-length:
      - '194'
      content-type:
      - application/json
    status:
      code: 400
      message: Bad Request
- request:
    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    pageviews_original;"}'
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Content-Length:
      - '63'
      Content-Type:
      - application/json
      Host:
      - localhost:8088
      User-Agent:
      - Python-urllib/3.6
    method: POST
    uri: http://localhost:8088/ksql
  response:
    body:
      string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF EXISTS\n    pageviews_original;","commandId":"stream/PAGEVIEWS_ORIGINAL/drop","commandStatus":{"status":"SUCCESS","message":"Source
        `PAGEVIEWS_ORIGINAL` does not exist."},"commandSequenceNumber":220,"warnings":[]}]'
    headers:
      connection:
      - close
      content-length:
      - '277'
      content-type:
      - application/json
    status:
      code: 200
      message: OK
- request:
    body: '{"ksql": "DESCRIBE EXTENDED create_stream_as_with_conditions_with_startwith;"}'
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Content-Length:
      - '78'
      Content-Type:
      - application/json
      Host:
      - localhost:8088
      User-Agent:
      - Python-urllib/3.6
    method: POST
    uri: http://localhost:8088/ksql
  response:
    body:
      string: '{"@type":"statement_error","error_code":40001,"message":"Could not
        find STREAM/TABLE ''CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH'' in the
        Metastore","statementText":"DESCRIBE EXTENDED create_stream_as_with_conditions_with_startwith;","entities":[]}'
    headers:
      connection:
      - close
      content-length:
      - '252'
      content-type:
      - application/json
    status:
      code: 400
      message: Bad Request
- request:
    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    create_stream_as_with_conditions_with_startwith;"}'
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Content-Length:
      - '92'
      Content-Type:
      - application/json
      Host:
      - localhost:8088
      User-Agent:
      - Python-urllib/3.6
    method: POST
    uri: http://localhost:8088/ksql
  response:
    body:
      string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF EXISTS\n    create_stream_as_with_conditions_with_startwith;","commandId":"stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH/drop","commandStatus":{"status":"SUCCESS","message":"Source
        `CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH` does not exist."},"commandSequenceNumber":222,"warnings":[]}]'
    headers:
      connection:
      - close
      content-length:
      - '364'
      content-type:
      - application/json
    status:
      code: 200
      message: OK
- request:
    body: '{"ksql": "CREATE stream pageviews_original (name string, age bigint, userid
      string, pageid bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Content-Length:
      - '160'
      Content-Type:
      - application/json
      Host:
      - localhost:8088
      User-Agent:
      - Python-urllib/3.6
    method: POST
    uri: http://localhost:8088/ksql
  response:
    body:
      string: '[{"@type":"currentStatus","statementText":"CREATE stream pageviews_original
        (name string, age bigint, userid string, pageid bigint) WITH (kafka_topic=''exist_topic'',
        value_format=''DELIMITED'');","commandId":"stream/`PAGEVIEWS_ORIGINAL`/create","commandStatus":{"status":"SUCCESS","message":"Stream
        created"},"commandSequenceNumber":224,"warnings":[]}]'
    headers:
      connection:
      - close
      content-length:
      - '349'
      content-type:
      - application/json
    status:
      code: 200
      message: OK
- request:
    body: '{"ksql": "CREATE stream create_stream_as_with_conditions_with_startwith
      WITH (kafka_topic=''create_stream_as_with_conditions_with_startwith'', value_format=''DELIMITED'',
      timestamp=''logtime'') AS SELECT rowtime as logtime, * FROM pageviews_original
      where userid = ''foo_%'';"}'
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Content-Length:
      - '269'
      Content-Type:
      - application/json
      Host:
      - localhost:8088
      User-Agent:
      - Python-urllib/3.6
    method: POST
    uri: http://localhost:8088/ksql
  response:
    body:
      string: '[{"@type":"currentStatus","statementText":"CREATE STREAM CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH
        WITH (KAFKA_TOPIC=''create_stream_as_with_conditions_with_startwith'', PARTITIONS=1,
        REPLICAS=1, TIMESTAMP=''logtime'', VALUE_FORMAT=''DELIMITED'') AS SELECT\n  PAGEVIEWS_ORIGINAL.ROWTIME
        LOGTIME,\n  *\nFROM PAGEVIEWS_ORIGINAL PAGEVIEWS_ORIGINAL\nWHERE (PAGEVIEWS_ORIGINAL.USERID
        = ''foo_%'')\nEMIT CHANGES;","commandId":"stream/`CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH`/create","commandStatus":{"status":"SUCCESS","message":"Created
        query with ID CSAS_CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH_173"},"commandSequenceNumber":226,"warnings":[]}]'
    headers:
      connection:
      - close
      content-length:
      - '655'
      content-type:
      - application/json
    status:
      code: 200
      message: OK
version: 1
